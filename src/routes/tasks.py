from datetime import datetime, timezone

from aiogram import Dispatcher, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ForceReply,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)

from src.api.db.database import get_session
from src.objects.tasks import TaskService
from src.objects.users import UserService


# FSM states for task creation
class TaskStates(StatesGroup):
    title: State = State()
    deadline: State = State()
    assign: State = State()
    confirm: State = State()


async def start_task_menu(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é –¥–ª—è –∑–∞–¥–∞—á"""
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"),
                types.KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞–¥–∞—á–∏"),
                types.KeyboardButton(text="üîé –í—Å–µ –∑–∞–¥–∞—á–∏"),
            ],
            [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
    )
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–ó–∞–¥–∞—á–∏¬ª:", reply_markup=keyboard)


async def cmd_task_create(message: types.Message, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await message.answer("–®–∞–≥ 1/4. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskStates.title)


async def process_title(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø—Ä–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞"""
    await state.update_data(title=message.text)
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É", callback_data="task_deadline_date"),
                InlineKeyboardButton(text="üõë –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="task_deadline_none"),
            ]
        ]
    )
    await message.answer("–®–∞–≥ 2/4. –£–∫–∞–∑–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω?", reply_markup=keyboard)
    await state.set_state(TaskStates.deadline)


async def process_deadline(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–≤–æ–¥—É"""
    await callback.answer()
    data: dict = await state.get_data()
    if callback.data == "task_deadline_none":
        data["deadline"] = None
        await callback.message.edit_text("–î–µ–¥–ª–∞–π–Ω –Ω–µ —É–∫–∞–∑–∞–Ω.")
    else:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.05.2023):",
        )
        await state.set_state(TaskStates.deadline)
        return

    await state.update_data(data)
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ @username", callback_data="task_assign_manual")],
        ]
    )
    await callback.message.answer("–®–∞–≥ 3/4. –ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å?", reply_markup=keyboard)
    await state.set_state(TaskStates.assign)


async def process_deadline_text(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
    text: str = message.text.strip()
    try:
        # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "DD.MM.YYYY HH:MM"
        deadline = datetime.strptime(text, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.MM.YYYY HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.05.2025 14:30)"
        )
        return
    await state.update_data(deadline=deadline)

    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ @username", callback_data="task_assign_manual")]
        ]
    )
    await message.answer("–®–∞–≥ 3/4. –ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å?", reply_markup=keyboard)
    await state.set_state(TaskStates.assign)


async def process_assign_manual(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ username –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ @username –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup=ForceReply())


async def process_assign_text(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ username –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    match = message.text.strip().split()
    if len(match) != 2 or not match[1].isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = int(match[1])

    async for session in get_session():
        user = await UserService.get(session, user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    data = await state.get_data()
    assigned_to_ids = data.get("assigned_to_ids")
    if user.id != assigned_to_ids:
        await state.update_data(assigned_to_ids=user.id)
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: @{user.username}")
    else:
        await message.answer(f"@{user.username} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")

    # –ü–æ–≤—Ç–æ—Ä–∏–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="task_assign_done")]]
    )
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª", reply_markup=keyboard)


async def process_confirm(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await callback.answer()
    data = await state.get_data()

    if callback.data == "task_assign_done":
        assigned_to_ids = data.get("assigned_to_ids")
        if not assigned_to_ids:
            await callback.message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
            return

        async for session in get_session():
            user = await UserService.get(session, assigned_to_ids)

        text = (
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
            f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {data.get('deadline') or '‚Äî'}\n"
            f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b> {user.username}"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="task_confirm_save")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="task_confirm_cancel")],
            ]
        )
        await callback.message.answer(text, reply_markup=keyboard)
        await state.set_state(TaskStates.confirm)
        return

    if callback.data == "task_confirm_cancel":
        await callback.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")
        await state.clear()
        return

    if callback.data == "task_confirm_save":
        async for session in get_session():
            task = await TaskService.create(
                session=session,
                title=data["title"],
                deadline=data.get("deadline"),
                assigned_to=data.get("assigned_to_ids"),
            )
        await callback.message.answer(f"–ó–∞–¥–∞—á–∞ '{task.title}' —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ")
        await state.clear()


async def user_inline_search(inline_query: InlineQuery, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state != TaskStates.assign.state:
        return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º inline-–∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –Ω–µ –Ω–∞ —à–∞–≥–µ assign

    query = inline_query.query.lower()
    if not query:
        return

    async for session in get_session():
        users = await UserService.list(session)
    matched = [u for u in users if u.username and query in u.username.lower()]

    results = [
        InlineQueryResultArticle(
            id=str(user.id),
            title=f"@{user.username}",
            input_message_content=InputTextMessageContent(message_text=f"üë§ {user.id}"),
            description=f"{user.full_name or ''}",
        )
        for user in matched[:20]
    ]

    await inline_query.answer(results, cache_time=1)


def register_task_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏"""
    dp.message.register(start_task_menu, F.text == "üìã –ó–∞–¥–∞—á–∏")

    dp.message.register(cmd_task_create, Command(commands=["task_create"]))
    dp.message.register(start_task_menu, F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")

    dp.message.register(process_title, StateFilter(TaskStates.title))

    dp.callback_query.register(process_deadline, StateFilter(TaskStates.deadline))

    dp.message.register(process_deadline_text, StateFilter(TaskStates.deadline))
    dp.callback_query.register(
        process_assign_manual,
        lambda c: c.data == "task_assign_manual",
        StateFilter(TaskStates.assign),
    )
    dp.message.register(process_assign_text, StateFilter(TaskStates.assign))

    dp.callback_query.register(process_confirm, StateFilter(TaskStates.assign))
    dp.callback_query.register(process_confirm, StateFilter(TaskStates.confirm))

    dp.inline_query.register(user_inline_search)
